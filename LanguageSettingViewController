import UIKit
class LanguageLocalizationModel : NSObject{
    
    var languageName : String!
    var languageCode : String!
    
    init(language : String, code : String) {
        languageName = language
        languageCode = code
    }
}
class LanguageListVC: UIViewController {
    
    var arrVoiceLanguages =  [LanguageLocalizationModel]()
    @IBOutlet weak var navigationView: NavigationBarView!
    @IBOutlet weak var languageListCV: UICollectionView!
    
    override func viewDidLoad() {
        super.viewDidLoad()

        navigationView.centerTitleLabel.text = "Language".localizedString
        navigationView.backButton.tintColor = .black
        navigationView.centerTitleLabel.textColor = .black
        
        languageListCV.dataSource = self
        languageListCV.delegate = self
        languageListCV.registerCell(identifire: CellIdentifiers.kToolsCollectionViewCell)
        
        arrVoiceLanguages.append(LanguageLocalizationModel(language: "Default Language".localizedString, code: "en"))
        arrVoiceLanguages.append(LanguageLocalizationModel(language: "Arabic".localized("ar"), code: "ar"))
        arrVoiceLanguages.append(LanguageLocalizationModel(language: "English".localized("en"), code: "en"))
        arrVoiceLanguages.append(LanguageLocalizationModel(language: "French".localized("fr"), code: "fr"))
        arrVoiceLanguages.append(LanguageLocalizationModel(language: "German".localized("de"), code: "de"))
        arrVoiceLanguages.append(LanguageLocalizationModel(language: "Italian".localized("it"), code: "it"))
        arrVoiceLanguages.append(LanguageLocalizationModel(language: "Portuguese".localized("pt-BR"), code: "pt-BR"))
//        arrVoiceLanguages.append(LanguagePDF(language: "Chinese Simplified".localized("zh-Hans"), code: "zh-Hans"))
        arrVoiceLanguages.append(LanguageLocalizationModel(language: "Chinese Traditional".localized("zh-Hant"), code: "zh-Hant"))
        arrVoiceLanguages.append(LanguageLocalizationModel(language: "Hindi".localized("hi"), code: "hi"))
        arrVoiceLanguages.append(LanguageLocalizationModel(language: "Japanese".localized("ja"), code: "ja"))
        //arrVoiceLanguages.append(LanguagePDF(language: "Russian".localized("ru"), code: "ru"))

        navigationView.leftButtonBlock = {
            self.navigationController?.popViewController(animated: true)

        }
    }
}


extension LanguageListVC : UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout{
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return arrVoiceLanguages.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CellIdentifiers.kToolsCollectionViewCell, for: indexPath) as! ToolsCollectionViewCell
        let model = arrVoiceLanguages[indexPath.row]
        cell.checkImageView.isHidden = false
        cell.checkImageView.image = UIImage()
        cell.configureLanguageListCell(model: model)
        
        if let value = UserDefaults.standard.value(forKey: "AlreadyChoosenLanguage") as? String{
            if value == model.languageName{
                cell.checkImageView.image = UIImage(named:"Check")
            }else{
                cell.checkImageView.image = UIImage()
            }
        }
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let language = arrVoiceLanguages[indexPath.row].languageName

        if indexPath.row == 0{
            UserDefaults.standard.setValue(true, forKey: "UseDeafultLanguage")
            UserDefaults.standard.setValue(language, forKey: "AlreadyChoosenLanguage")
            navigationView.centerTitleLabel.text = "Language".localizedString
            languageListCV.reloadData()
            NotificationCenter.default.post(name: NotificationNames.kReloadTababar, object: nil)

            return
        }
        UserDefaults.standard.setValue(false, forKey: "UseDeafultLanguage")
        let languageCode = arrVoiceLanguages[indexPath.row].languageCode
        UserDefaults.standard.setValue(language, forKey: "AlreadyChoosenLanguage")
        UserDefaults.standard.setValue(languageCode, forKey: "AlreadyChoosenLanguageCode")
        languageListCV.reloadData()
        navigationView.centerTitleLabel.text = "Language".localizedString
        NotificationCenter.default.post(name: NotificationNames.kReloadTababar, object: nil)
    }
    
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.width, height: 60)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 0, left: 0, bottom: 60, right: 0)
    }
    
}








extension String{
    var localizedString: String {
        
        if let languageCode = UserDefaults.standard.value(forKey: "UseDeafultLanguage") as? Bool {
            if languageCode{
                return NSLocalizedString(self, comment: "")
            }
        }
        if let languageCode = UserDefaults.standard.value(forKey: "AlreadyChoosenLanguageCode") as? String{
            return self.localized(languageCode)
        }
        return NSLocalizedString(self, comment: "")
    }
    
    func localized(_ lang:String) ->String {
        if let path = Bundle.main.path(forResource: lang, ofType: "lproj"){
            if let bundle = Bundle(path: path){
                return NSLocalizedString(self, tableName: nil, bundle: bundle, value: "", comment: "")
            }
        }
        return self
    }
}


